#define ENA_m2 10       // Enable/speed motor Front Left
#define ENB_m2 11       // Enable/speed motor Back Left
#define IN_21  8        // L298N #2 in 1 motor Front Left
#define IN_22  9        // L298N #2 in 2 motor Front Left
#define IN_23  12       // L298N #2 in 3 motor Back Left
#define IN_24  13       // L298N #2 in 4 motor Back Left

//#include<SoftwareSerial.h>
//SoftwareSerial s(4, 5);
#include<SoftwareSerial.h>
//SoftwareSerial mySerial(4, 5); //  RX & TX

SoftwareSerial mySerial_module_sim800L(3, 2); //SIM800L Tx & Rx is connected to Arduino #3 & #2  // RX & TX

int command;            //Int to store app command state.
int speedCar = 100;     // 50 - 255.
int speed_Coeff = 4;



const int relay = 12;
String lampState = "HIGH";
String textMessage;

 

void setup() {  
   pinMode(relay, OUTPUT);
  //Begin serial communication with Arduino and Arduino IDE (Serial Monitor)
  Serial.begin(115200);
  //SIM900.begin(115200);
  //mySerial.begin(9600);
  
  //Begin serial communication with Arduino and SIM800L
  mySerial_module_sim800L.begin(115200);

  
  Serial.println("Staring time... ");
  delay(1000);
  
    //Begin serial communication with Arduino and Arduino IDE (Serial Monitor)
    
    pinMode(ENA_m2, OUTPUT);
    pinMode(ENB_m2, OUTPUT);
    pinMode(IN_21, OUTPUT);
    pinMode(IN_22, OUTPUT);
    pinMode(IN_23, OUTPUT);
    pinMode(IN_24, OUTPUT);
    delay(1000);
    Serial.println("SIM900 ready...");
    mySerial_module_sim800L.println("AT"); //Once the handshake test is successful, it will back to OK
    updateSerial();

  
  
  // AT command to set SIM900 to SMS mode
  mySerial_module_sim800L.println("AT+CMGF=1\r"); 
  delay(100);
  
  // Set module to send SMS data to serial out upon receipt 
  mySerial_module_sim800L.println("AT+CNMI=2,2,0,0,0\r");
  delay(100);
  
  /* mySerial_module_sim800L.println("AT+CSQ"); //Signal quality test, value range is 0-31 , 31 is the best
  updateSerial();
  mySerial_module_sim800L.println("AT+CCID"); //Read SIM information to confirm whether the SIM is plugged
  updateSerial();
  mySerial_module_sim800L.println("AT+CREG?"); //Check whether it has registered in the network
  updateSerial();

 //receive message
  mySerial_module_sim800L.println("AT"); //Once the handshake test is successful, it will back to OK
  updateSerial();
  mySerial_module_sim800L.println("AT+CMGF=1"); // Configuring TEXT mode
  updateSerial();
  mySerial_module_sim800L.println("AT+CNMI=1,2,0,0,0"); // Decides how newly arrived SMS messages should be handled
  updateSerial();
  
 
  //send message
  mySerial_module_sim800L.println("AT"); //Once the handshake test is successful, it will back to OK
  updateSerial();
  mySerial_module_sim800L.println("AT+CMGF=1"); // Configuring TEXT mode
  updateSerial();
  mySerial_module_sim800L.println("AT+CMGS=\"+84868475996\"");//change ZZ with country code and xxxxxxxxxxx with phone number to sms
  updateSerial();
  mySerial_module_sim800L.print("HAVE A GOOD DAY"); //text content
  updateSerial();
  mySerial_module_sim800L.write(26);
  */
  } 

void goAhead(){ 
      digitalWrite(IN_21, LOW);
      digitalWrite(IN_22, HIGH);
      analogWrite(ENA_m2, speedCar);
      
      digitalWrite(IN_23, LOW);
      digitalWrite(IN_24, HIGH);
      analogWrite(ENB_m2, speedCar);

  }

void goBack(){ 

      digitalWrite(IN_21, HIGH);
      digitalWrite(IN_22, LOW);
      analogWrite(ENA_m2, speedCar);

      digitalWrite(IN_23, HIGH);
      digitalWrite(IN_24, LOW);
      analogWrite(ENB_m2, speedCar);

  }

void goRight(){ 

      digitalWrite(IN_21, HIGH);
      digitalWrite(IN_22, LOW);
      analogWrite(ENA_m2, speedCar);

      digitalWrite(IN_23, LOW);
      digitalWrite(IN_24, HIGH);
      analogWrite(ENB_m2, speedCar);


  }

void goLeft(){
      
      digitalWrite(IN_21, LOW);
      digitalWrite(IN_22, HIGH);
      analogWrite(ENA_m2, speedCar);

      digitalWrite(IN_23, HIGH);
      digitalWrite(IN_24, LOW);
      analogWrite(ENB_m2, speedCar);
      
        
  }

void goAheadRight(){

      digitalWrite(IN_21, LOW);
      digitalWrite(IN_22, HIGH);
      analogWrite(ENA_m2, speedCar);

      digitalWrite(IN_23, HIGH);
      digitalWrite(IN_24, LOW);
      analogWrite(ENB_m2, speedCar);
 
  }

void goAheadLeft(){

      digitalWrite(IN_21, LOW);
      digitalWrite(IN_22, HIGH);
      analogWrite(ENA_m2, speedCar);

      digitalWrite(IN_23, HIGH);
      digitalWrite(IN_24, LOW);
      analogWrite(ENB_m2, speedCar);
 
  }

void goBackRight(){ 

      digitalWrite(IN_21, HIGH);
      digitalWrite(IN_22, LOW);
      analogWrite(ENA_m2, speedCar);

      digitalWrite(IN_23, LOW);
      digitalWrite(IN_24, HIGH);
      analogWrite(ENB_m2, speedCar);

  }

void goBackLeft(){ 
  
      digitalWrite(IN_21, HIGH);
      digitalWrite(IN_22, LOW);
      analogWrite(ENA_m2, speedCar);


      digitalWrite(IN_23, LOW);
      digitalWrite(IN_24, HIGH);
      analogWrite(ENB_m2, speedCar);

  }

void stopRobot(){  

      digitalWrite(IN_21, LOW);
      digitalWrite(IN_22, LOW);
      analogWrite(ENA_m2, speedCar);

      digitalWrite(IN_23, LOW);
      digitalWrite(IN_24, LOW);
      analogWrite(ENB_m2, speedCar);
  
  }

void Auto(){

  int SensorValue = digitalRead(7);
  
  Serial.print("SensorPin Value: ");
  Serial.println(SensorValue);
  delay(1000);
 
  if (SensorValue==LOW)   //LOW MEANS Object Detected
  { 
      Serial.println("LOW");
      goAhead();        
  }
  else
  {
      Serial.println("HIGH");
      goBack();
  }
  
}
  
void loop(){
  
  if (Serial.available() > 0) { 
  command = Serial.read();
  
      if (command == 'F') goAhead();
      else if (command == 'B') goBack();
      else if (command == 'L') goLeft();
      else if (command == 'R') goRight();
      else if (command == 'I') goAheadRight();
      else if (command == 'G') goAheadLeft();
      else if (command == 'J') goBackRight();
      else if (command == 'H') goBackLeft();
      else if (command == '0') speedCar = 400;
      else if (command == '1') speedCar = 470;
      else if (command == '2') speedCar = 540;
      else if (command == '3') speedCar = 610;
      else if (command == '4') speedCar = 680;
      else if (command == '5') speedCar = 750;
      else if (command == '6') speedCar = 820;
      else if (command == '7') speedCar = 890;
      else if (command == '8') speedCar = 960;
      else if (command == '9') speedCar = 1023;
      else if (command == 'S') stopRobot();
      else if (command == 'A') Auto();
}
    if(mySerial_module_sim800L.available()>0){
    textMessage = mySerial_module_sim800L.readString();
    Serial.print(textMessage);
    //updateSerial();    
    delay(10);
  } 
  if(textMessage.indexOf("ON")>=0){
    // Turn on relay and save current state
    
    lampState = "on";
    Serial.println("Relay set to ON");  
    textMessage = "";   
    goAhead();
  }
  if(textMessage.indexOf("OFF")>=0){
    // Turn off relay and save current state
    
    lampState = "off"; 
    Serial.println("Relay set to OFF");
    textMessage = ""; 
    goBack();
  }
  if(textMessage.indexOf("STATE")>=0){
    String message = "Lamp is " + lampState;
    sendSMS(message);
    Serial.println("Lamp state resquest");
    textMessage = "";
  }
    
    
  
}

void updateSerial()
{
  delay(500);
  while (Serial.available()) 
  {
    mySerial_module_sim800L.write(Serial.read());//Forward what Serial received to Software Serial Port
  }
  while(mySerial_module_sim800L.available()) 
  {
    Serial.write(mySerial_module_sim800L.read());//Forward what Software Serial received to Serial Port
  }
}

// Function that sends SMS
void sendSMS(String message){
  // AT command to set SIM900 to SMS mode
  mySerial_module_sim800L.print("AT+CMGF=1\r"); 
  delay(100);

  // REPLACE THE X's WITH THE RECIPIENT'S MOBILE NUMBER
  // USE INTERNATIONAL FORMAT CODE FOR MOBILE NUMBERS
  mySerial_module_sim800L.println("AT+CMGS=\"+84868475996\""); 
  delay(100);
  // Send the SMS
  mySerial_module_sim800L.println(message); 
  delay(100);
  // End AT command with a ^Z, ASCII code 26
  mySerial_module_sim800L.write(26);
  delay(100);
  mySerial_module_sim800L.println();
  // Give module time to send SMS
  delay(5000);  
}